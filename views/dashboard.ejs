<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Dashboard</title>
  <style>
    :root {
      --font-primary: "PP Object Sans", Arial, sans-serif;
      --font-secondary: "Druk Wide Trial", Arial, sans-serif;
      --color-text: #fff;
      --color-text-secondary: #eaeaea;
      --color-bg: #000;
      --color-bg-secondary: #000000;
      --color-callout: #24262a;
      --color-accent: #e74c3c;
      --color-accent-hover: #c0392b;
      --color-accent-secondary: #ff6b6b;
      --color-accent-tertiary: #f39c12;
    }

    * {
      margin: 0;
      padding: 0;
      box-sizing: border-box;
    }

    body {
      font-family: var(--font-primary);
      background-color: var(--color-bg);
      color: var(--color-text);
      max-width: 1400px;
      margin: 0 auto;
      padding: 20px;
      min-height: 100vh;
    }

    h1 {
      font-family: var(--font-secondary);
      font-size: 3rem;
      font-weight: bold;
      text-transform: uppercase;
      margin-bottom: 40px;
      text-align: center;
      background: linear-gradient(135deg, var(--color-text), var(--color-accent));
      -webkit-background-clip: text;
      -webkit-text-fill-color: transparent;
      background-clip: text;
    }

    .search-container {
      margin-bottom: 30px;
      display: flex;
      gap: 15px;
      align-items: center;
      background: var(--color-callout);
      padding: 20px;
      border-radius: 15px;
      border: 1px solid rgba(255, 255, 255, 0.1);
    }

    #search {
      flex: 1;
      padding: 15px 20px;
      border: 2px solid rgba(255, 255, 255, 0.2);
      border-radius: 10px;
      font-size: 16px;
      background: rgba(255, 255, 255, 0.05);
      color: var(--color-text);
      font-family: var(--font-primary);
      transition: all 0.3s ease;
    }

    #search:focus {
      outline: none;
      border-color: var(--color-accent);
      background: rgba(255, 255, 255, 0.1);
      box-shadow: 0 0 0 3px rgba(231, 76, 60, 0.2);
    }

    #search::placeholder {
      color: var(--color-text-secondary);
    }

    #btn-search {
      padding: 15px 30px;
      background: linear-gradient(135deg, var(--color-accent), var(--color-accent-hover));
      color: var(--color-text);
      border: none;
      border-radius: 10px;
      cursor: pointer;
      font-size: 16px;
      font-weight: 600;
      text-transform: uppercase;
      letter-spacing: 1px;
      transition: all 0.3s ease;
      font-family: var(--font-primary);
    }

    #btn-search:hover {
      transform: translateY(-2px);
      box-shadow: 0 8px 25px rgba(231, 76, 60, 0.4);
    }

    #btn-search:disabled {
      opacity: 0.6;
      transform: none;
      cursor: not-allowed;
    }

    .job-card {
      background: var(--color-callout);
      border: 1px solid rgba(255, 255, 255, 0.1);
      border-radius: 15px;
      padding: 25px;
      margin-bottom: 20px;
      transition: all 0.3s ease;
      position: relative;
      overflow: hidden;
    }

    .job-card::before {
      content: '';
      position: absolute;
      top: 0;
      left: 0;
      right: 0;
      height: 3px;
      background: linear-gradient(90deg, var(--color-accent), var(--color-accent-secondary), var(--color-accent-tertiary));
    }

    .job-card:hover {
      transform: translateY(-5px);
      border-color: var(--color-accent);
      box-shadow: 0 10px 30px rgba(231, 76, 60, 0.3);
    }

    .job-title {
      font-size: 22px;
      font-weight: bold;
      color: var(--color-text);
      margin-bottom: 15px;
      font-family: var(--font-primary);
    }

    .job-title a {
      text-decoration: none;
      color: var(--color-text);
      transition: color 0.3s ease;
    }

    .job-title a:hover {
      color: var(--color-accent);
    }

    .job-snippet {
      color: var(--color-text-secondary);
      line-height: 1.6;
      margin-bottom: 15px;
      font-size: 15px;
    }

    .job-url {
      font-size: 13px;
      color: var(--color-accent);
      font-weight: 500;
      text-transform: uppercase;
      letter-spacing: 0.5px;
    }

    .no-results {
      text-align: center;
      color: var(--color-text-secondary);
      font-style: italic;
      padding: 60px 20px;
      background: var(--color-callout);
      border-radius: 15px;
      border: 1px solid rgba(255, 255, 255, 0.1);
    }

    .no-results h3 {
      color: var(--color-text);
      margin-bottom: 10px;
      font-size: 24px;
    }

    #loading {
      text-align: center;
      color: var(--color-text-secondary);
      font-style: italic;
      padding: 40px;
      background: var(--color-callout);
      border-radius: 15px;
      border: 1px solid rgba(255, 255, 255, 0.1);
    }

    .pagination {
      display: flex;
      justify-content: center;
      align-items: center;
      margin: 40px 0;
      gap: 10px;
      flex-wrap: wrap;
    }

    .pagination button {
      padding: 12px 20px;
      border: 2px solid rgba(255, 255, 255, 0.2);
      background: var(--color-callout);
      color: var(--color-text);
      border-radius: 10px;
      cursor: pointer;
      font-size: 14px;
      font-weight: 500;
      transition: all 0.3s ease;
      font-family: var(--font-primary);
    }

    .pagination button:hover:not(:disabled) {
      background: var(--color-accent);
      border-color: var(--color-accent);
      transform: translateY(-2px);
    }

    .pagination button.active {
      background: var(--color-accent);
      border-color: var(--color-accent);
      box-shadow: 0 4px 15px rgba(231, 76, 60, 0.4);
    }

    .pagination button:disabled {
      opacity: 0.4;
      cursor: not-allowed;
      transform: none;
    }

    .pagination-info {
      margin: 0 15px;
      color: var(--color-text-secondary);
      font-size: 14px;
      font-weight: 500;
    }

    .results-header {
      display: flex;
      justify-content: space-between;
      align-items: center;
      margin-bottom: 25px;
      padding: 20px;
      background: var(--color-callout);
      border-radius: 15px;
      border: 1px solid rgba(255, 255, 255, 0.1);
      flex-wrap: wrap;
      gap: 15px;
    }

    .results-count {
      color: var(--color-text);
      font-size: 16px;
      font-weight: 500;
    }

    .per-page-selector {
      display: flex;
      align-items: center;
      gap: 12px;
    }

    .per-page-selector label {
      color: var(--color-text-secondary);
      font-size: 14px;
      font-weight: 500;
    }

    .per-page-selector select {
      padding: 8px 15px;
      border: 2px solid rgba(255, 255, 255, 0.2);
      border-radius: 8px;
      font-size: 14px;
      background: rgba(255, 255, 255, 0.05);
      color: var(--color-text);
      font-family: var(--font-primary);
      cursor: pointer;
    }

    .per-page-selector select:focus {
      outline: none;
      border-color: var(--color-accent);
    }

    .preloaded-notice {
      background: linear-gradient(135deg, rgba(231, 76, 60, 0.15), rgba(255, 107, 107, 0.1));
      border: 1px solid rgba(231, 76, 60, 0.4);
      border-radius: 15px;
      padding: 20px;
      margin-bottom: 25px;
      color: var(--color-text);
      font-size: 14px;
      display: flex;
      align-items: center;
      gap: 12px;
    }

    .preloaded-notice .icon {
      font-size: 18px;
    }

    .sample-badge {
      background: linear-gradient(135deg, #ff6b6b, #ee5a24);
      color: #fff;
      padding: 4px 12px;
      border-radius: 15px;
      font-size: 11px;
      font-weight: bold;
      margin-left: 10px;
      text-transform: uppercase;
      letter-spacing: 0.5px;
      box-shadow: 0 2px 8px rgba(255, 107, 107, 0.3);
    }

    .filter-section {
      background: var(--color-callout);
      border: 1px solid rgba(255, 255, 255, 0.1);
      border-radius: 20px;
      padding: 30px;
      margin-bottom: 40px;
      position: relative;
      overflow: hidden;
    }

    .filter-section::before {
      content: '';
      position: absolute;
      top: 0;
      left: 0;
      right: 0;
      height: 4px;
      background: linear-gradient(90deg, var(--color-accent), var(--color-accent-secondary), var(--color-accent-tertiary), #e67e22);
    }

    .filter-title {
      font-family: var(--font-secondary);
      font-size: 24px;
      font-weight: bold;
      color: var(--color-text);
      margin-bottom: 25px;
      display: flex;
      align-items: center;
      gap: 12px;
      text-transform: uppercase;
      letter-spacing: 1px;
    }

    .filter-buttons {
      display: grid;
      grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
      gap: 15px;
    }

    .filter-btn {
      padding: 15px 20px;
      border: 2px solid rgba(255, 255, 255, 0.2);
      background: rgba(255, 255, 255, 0.05);
      color: var(--color-text);
      border-radius: 15px;
      cursor: pointer;
      font-size: 14px;
      font-weight: 500;
      transition: all 0.3s ease;
      display: flex;
      align-items: center;
      justify-content: center;
      gap: 10px;
      text-transform: uppercase;
      letter-spacing: 0.5px;
      font-family: var(--font-primary);
      position: relative;
      overflow: hidden;
    }

    .filter-btn::before {
      content: '';
      position: absolute;
      top: 0;
      left: -100%;
      width: 100%;
      height: 100%;
      background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.1), transparent);
      transition: left 0.5s ease;
    }

    .filter-btn:hover::before {
      left: 100%;
    }

    .filter-btn:hover {
      background: var(--color-accent);
      border-color: var(--color-accent);
      transform: translateY(-3px);
      box-shadow: 0 10px 25px rgba(231, 76, 60, 0.4);
    }

    .filter-btn.active {
      background: var(--color-accent);
      border-color: var(--color-accent);
      box-shadow: 0 6px 20px rgba(231, 76, 60, 0.5);
    }

    .filter-icon {
      font-size: 18px;
    }

    @media (max-width: 768px) {
      h1 {
        font-size: 2rem;
      }

      .search-container {
        flex-direction: column;
        gap: 15px;
      }

      #search,
      #btn-search {
        width: 100%;
      }

      .filter-buttons {
        grid-template-columns: 1fr;
      }

      .results-header {
        flex-direction: column;
        text-align: center;
      }

      .pagination {
        gap: 8px;
      }

      .pagination button {
        padding: 10px 15px;
        font-size: 12px;
      }
    }

    @media (max-width: 480px) {
      body {
        padding: 15px;
      }

      h1 {
        font-size: 1.5rem;
        margin-bottom: 25px;
      }

      .filter-section,
      .search-container {
        padding: 20px;
      }

      .job-card {
        padding: 20px;
      }
    }
  </style>
</head>

<body>
  <h1>Job Search Dashboard</h1>

  <!-- Quick Filter Section -->
  <div class="filter-section">
    <div class="filter-title">
      <span class="filter-icon">🔍</span>
      Quick Job Filters
    </div>
    <div class="filter-buttons">
      <button class="filter-btn" onclick="quickSearch('web developer')">
        <span class="filter-icon">💻</span>
        Web Developer
      </button>
      <button class="filter-btn" onclick="quickSearch('java developer')">
        <span class="filter-icon">☕</span>
        Java Developer
      </button>
      <button class="filter-btn" onclick="quickSearch('python developer')">
        <span class="filter-icon">🐍</span>
        Python Developer
      </button>
      <button class="filter-btn" onclick="quickSearch('react developer')">
        <span class="filter-icon">⚛️</span>
        React Developer
      </button>
      <button class="filter-btn" onclick="quickSearch('data scientist')">
        <span class="filter-icon">📊</span>
        Data Scientist
      </button>
      <button class="filter-btn" onclick="quickSearch('ui ux designer')">
        <span class="filter-icon">🎨</span>
        UI/UX Designer
      </button>
      <button class="filter-btn" onclick="quickSearch('full stack developer')">
        <span class="filter-icon">🚀</span>
        Full Stack
      </button>
      <button class="filter-btn" onclick="quickSearch('mobile app developer')">
        <span class="filter-icon">📱</span>
        Mobile Developer
      </button>
    </div>
  </div>

  <div class="search-container">
    <input id="search" value="" type="text" placeholder="Search for job listings">
    <button id="btn-search">Search</button>
  </div>

  <div id="loading" style="display: none;">
    <p>Searching for jobs...</p>
  </div>

  <div id="results-container">
    <!-- Search results will be displayed here -->
  </div>

  <div id="pagination-container" style="display: none;">
    <!-- Pagination controls will be displayed here -->
  </div>



</body>
<script>
  // Global variables for pagination
  let currentJobs = [];
  let currentPage = 1;
  let jobsPerPage = 5;

  // Function to load jobs from cron job database
  async function loadJobsFromDatabase(filters = {}) {
    try {
      const params = new URLSearchParams();

      if (filters.search) params.append('search', filters.search);
      if (filters.category) params.append('category', filters.category);
      if (filters.location) params.append('location', filters.location);
      if (filters.jobType) params.append('jobType', filters.jobType);
      if (filters.page) params.append('page', filters.page);
      if (filters.limit) params.append('limit', filters.limit);

      const response = await fetch(`/api/jobs?${params.toString()}`);
      const result = await response.json();

      if (result.success && result.data) {
        // Transform database jobs to match the expected format
        const transformedJobs = result.data.map(job => ({
          kind: "customsearch#result",
          title: job.title,
          htmlTitle: job.title,
          link: job.url,
          displayLink: job.source || job.company,
          snippet: job.description,
          htmlSnippet: job.description,
          company: job.company,
          location: job.location,
          jobType: job.jobType,
          skills: job.skills,
          category: job.category,
          postedDate: job.postedDate
        }));

        return {
          success: true,
          jobs: transformedJobs,
          pagination: result.pagination
        };
      } else {
        return { success: true, jobs: [], message: result.message || 'No jobs found' };
      }
    } catch (error) {
      console.error('Error loading jobs from database:', error);
      return { success: false, error: 'Failed to load jobs from database' };
    }
  }

  // Function to get job listings from API
  const apiKey = '<%= apiKey %>';
  const cx = '<%= engineId %>';

  async function getJobListings(searchTerm = 'Web developers') {
    try {
      // First, try to get jobs from the database
      const dbResult = await loadJobsFromDatabase({
        search: searchTerm,
        limit: 50 // Get more results from database
      });

      if (dbResult.success && dbResult.jobs.length > 0) {
        console.log(`✅ Found ${dbResult.jobs.length} jobs from database for: ${searchTerm}`);
        return dbResult;
      }

      // If no database results, fall back to Google API
      console.log(`🔄 No database results for "${searchTerm}", trying Google API...`);

      const response = await fetch(`https://www.googleapis.com/customsearch/v1?key=${apiKey}&cx=${cx}&q=${encodeURIComponent(searchTerm + ' jobs')}`);
      const data = await response.json();

      if (data.items && data.items.length > 0) {
        return { success: true, jobs: data.items };
      } else {
        return { success: true, jobs: [], message: 'No jobs found for your search' };
      }
    } catch (error) {
      console.error('Error fetching job listings:', error);
      return { success: false, error: 'Failed to fetch jobs' };
    }
  }

  // Function to display paginated job listings
  function displayJobListings(jobData, isPreloaded = false) {
    const resultsContainer = document.getElementById('results-container');
    const paginationContainer = document.getElementById('pagination-container');

    if (!jobData.success) {
      resultsContainer.innerHTML = `
        <div class="no-results">
          <h3>Error: ${jobData.error}</h3>
          <p>Please try again later.</p>
        </div>
      `;
      paginationContainer.style.display = 'none';
      return;
    }

    if (jobData.jobs.length === 0) {
      resultsContainer.innerHTML = `
        <div class="no-results">
          <h3>No jobs found</h3>
          <p>Try searching with different keywords.</p>
        </div>
      `;
      paginationContainer.style.display = 'none';
      return;
    }

    // Store jobs globally and reset to first page
    currentJobs = jobData.jobs;
    currentPage = 1;

    // Display current page
    displayCurrentPage(isPreloaded);

    // Show pagination if there are multiple pages
    if (currentJobs.length > jobsPerPage) {
      displayPagination();
      paginationContainer.style.display = 'block';
    } else {
      paginationContainer.style.display = 'none';
    }
  }

  // Function to display jobs for current page
  function displayCurrentPage(isPreloaded = false) {
    const resultsContainer = document.getElementById('results-container');
    const startIndex = (currentPage - 1) * jobsPerPage;
    const endIndex = startIndex + jobsPerPage;
    const pageJobs = currentJobs.slice(startIndex, endIndex);

    const jobsHTML = pageJobs.map(job => `
      <div class="job-card">
        <div class="job-title">
          <a href="${job.link}" target="_blank">${job.title}</a>
        </div>
        <div class="job-snippet">
          ${job.snippet || 'No description available'}
        </div>
        <div class="job-url">
          ${job.displayLink}
        </div>
      </div>
    `).join('');

    const totalPages = Math.ceil(currentJobs.length / jobsPerPage);
    const showingStart = startIndex + 1;
    const showingEnd = Math.min(endIndex, currentJobs.length);


    resultsContainer.innerHTML = `
      <div class="results-header">
        <div class="results-count">
          Showing ${showingStart}-${showingEnd} of ${currentJobs.length} job listings
        </div>
        <div class="per-page-selector">
          <label for="per-page">Jobs per page:</label>
          <select id="per-page" onchange="changeJobsPerPage(this.value)">
            <option value="5" ${jobsPerPage === 5 ? 'selected' : ''}>5</option>
            <option value="10" ${jobsPerPage === 10 ? 'selected' : ''}>10</option>
            <option value="15" ${jobsPerPage === 15 ? 'selected' : ''}>15</option>
            <option value="20" ${jobsPerPage === 20 ? 'selected' : ''}>20</option>
          </select>
        </div>
      </div>
      ${jobsHTML}
    `;
  }

  // Function to display pagination controls
  function displayPagination() {
    const paginationContainer = document.getElementById('pagination-container');
    const totalPages = Math.ceil(currentJobs.length / jobsPerPage);

    let paginationHTML = '<div class="pagination">';

    // Previous button
    paginationHTML += `
      <button onclick="changePage(${currentPage - 1})" ${currentPage === 1 ? 'disabled' : ''}>
        « Previous
      </button>
    `;

    // Page numbers
    const maxVisiblePages = 5;
    let startPage = Math.max(1, currentPage - Math.floor(maxVisiblePages / 2));
    let endPage = Math.min(totalPages, startPage + maxVisiblePages - 1);

    // Adjust start page if we're near the end
    if (endPage - startPage < maxVisiblePages - 1) {
      startPage = Math.max(1, endPage - maxVisiblePages + 1);
    }

    // First page and ellipsis
    if (startPage > 1) {
      paginationHTML += `<button onclick="changePage(1)">1</button>`;
      if (startPage > 2) {
        paginationHTML += `<span class="pagination-info">...</span>`;
      }
    }

    // Page number buttons
    for (let i = startPage; i <= endPage; i++) {
      paginationHTML += `
        <button onclick="changePage(${i})" ${i === currentPage ? 'class="active"' : ''}>
          ${i}
        </button>
      `;
    }

    // Last page and ellipsis
    if (endPage < totalPages) {
      if (endPage < totalPages - 1) {
        paginationHTML += `<span class="pagination-info">...</span>`;
      }
      paginationHTML += `<button onclick="changePage(${totalPages})">${totalPages}</button>`;
    }

    // Next button
    paginationHTML += `
      <button onclick="changePage(${currentPage + 1})" ${currentPage === totalPages ? 'disabled' : ''}>
        Next »
      </button>
    `;

    // Page info
    paginationHTML += `
      <div class="pagination-info">
        Page ${currentPage} of ${totalPages}
      </div>
    `;

    paginationHTML += '</div>';

    paginationContainer.innerHTML = paginationHTML;
  }

  // Function to change page
  function changePage(newPage) {
    const totalPages = Math.ceil(currentJobs.length / jobsPerPage);
    if (newPage >= 1 && newPage <= totalPages) {
      currentPage = newPage;
      displayCurrentPage();
      displayPagination();

      // Scroll to top of results
      document.getElementById('results-container').scrollIntoView({
        behavior: 'smooth'
      });
    }
  }

  // Function to change jobs per page
  function changeJobsPerPage(newPerPage) {
    jobsPerPage = parseInt(newPerPage);
    currentPage = 1; // Reset to first page
    displayCurrentPage();

    if (currentJobs.length > jobsPerPage) {
      displayPagination();
      document.getElementById('pagination-container').style.display = 'block';
    } else {
      document.getElementById('pagination-container').style.display = 'none';
    }
  }

  const input = document.getElementById('search');
  const btn = document.getElementById('btn-search');
  const loadingDiv = document.getElementById('loading');

  btn.addEventListener("click", async function () {
    const searchTerm = input.value.trim();

    if (!searchTerm) {
      alert('Please enter a search term');
      return;
    }

    console.log('Searching for:', searchTerm);

    // Show loading state
    loadingDiv.style.display = 'block';
    document.getElementById('results-container').innerHTML = '';
    btn.disabled = true;
    btn.textContent = 'Searching...';

    try {
      const jobData = await getJobListings(searchTerm);
      console.log('Job listings:', jobData);

      // Display the results
      displayJobListings(jobData);

    } catch (error) {
      console.error('Search failed:', error);
      document.getElementById('results-container').innerHTML = `
        <div class="no-results">
          <h3>Search failed</h3>
          <p>An error occurred while searching. Please try again.</p>
        </div>
      `;
    } finally {
      // Hide loading state
      loadingDiv.style.display = 'none';
      btn.disabled = false;
      btn.textContent = 'Search';
    }
  });

  // Allow search on Enter key press
  input.addEventListener('keypress', function (e) {
    if (e.key === 'Enter') {
      btn.click();
    }
  });

  // Load jobs from cron job database when page loads
  document.addEventListener('DOMContentLoaded', async function () {
    console.log('🔄 Loading jobs from cron job database...');

    try {
      const loadingDiv = document.getElementById('loading');
      loadingDiv.style.display = 'block';

      // Load recent jobs from database
      const dbJobs = await loadJobsFromDatabase({
        limit: 50 // Load more jobs initially
      });

      if (dbJobs.success && dbJobs.jobs.length > 0) {
        console.log(`✅ Loaded ${dbJobs.jobs.length} jobs from database`);
        displayJobListings(dbJobs, true);

        // Add notice that these are from cron job
        const resultsContainer = document.getElementById('results-container');
        const noticeHTML = `
          <div class="preloaded-notice">
            <span class="icon">🤖</span>
            <div>
              <strong>Fresh Jobs from Automated System</strong><br>
              These job listings were automatically fetched and updated by our cron job system. 
              Last updated: ${new Date().toLocaleString()}
            </div>
          </div>
        `;
        resultsContainer.innerHTML = noticeHTML + resultsContainer.innerHTML;
      } else {
        // Show empty state with explanation
        document.getElementById('results-container').innerHTML = `
          <div class="no-results">
            <h3>🔍 Ready to Search</h3>
            <p>Use the search bar above or click on one of the quick filter buttons to find job listings.</p>
            <p><small>Our automated system regularly fetches fresh job data to provide you with the latest opportunities.</small></p>
          </div>
        `;
      }
    } catch (error) {
      console.error('Error loading initial jobs:', error);
      document.getElementById('results-container').innerHTML = `
        <div class="no-results">
          <h3>🔍 Ready to Search</h3>
          <p>Use the search bar above or click on one of the quick filter buttons to find job listings.</p>
        </div>
      `;
    } finally {
      document.getElementById('loading').style.display = 'none';
    }
  });

  // Quick search function for filter buttons
  async function quickSearch(searchTerm) {
    const input = document.getElementById('search');
    const btn = document.getElementById('btn-search');
    const loadingDiv = document.getElementById('loading');

    // Set the search term in the input
    input.value = searchTerm;

    // Add visual feedback - highlight the clicked button
    document.querySelectorAll('.filter-btn').forEach(btn => btn.classList.remove('active'));
    event.target.closest('.filter-btn').classList.add('active');

    // Show loading state
    loadingDiv.style.display = 'block';
    document.getElementById('results-container').innerHTML = '';
    btn.disabled = true;
    btn.textContent = 'Searching...';

    try {
      // First try to search in database by category
      const categorySearch = await loadJobsFromDatabase({
        category: searchTerm,
        limit: 50
      });

      if (categorySearch.success && categorySearch.jobs.length > 0) {
        console.log(`✅ Found ${categorySearch.jobs.length} jobs in database for category: ${searchTerm}`);
        displayJobListings(categorySearch);
      } else {
        // Fall back to regular search
        const jobData = await getJobListings(searchTerm);
        displayJobListings(jobData);
      }
    } catch (error) {
      console.error('Quick search failed:', error);
      document.getElementById('results-container').innerHTML = `
        <div class="no-results">
          <h3>Search failed</h3>
          <p>An error occurred while searching. Please try again.</p>
        </div>
      `;
    } finally {
      // Hide loading state
      loadingDiv.style.display = 'none';
      btn.disabled = false;
      btn.textContent = 'Search';
    }

    // Remove active state after a short delay
    setTimeout(() => {
      document.querySelectorAll('.filter-btn').forEach(btn => btn.classList.remove('active'));
    }, 2000);
  }
</script>

</html>